#!/usr/bin/env ruby

require "bundler/setup"
require "time"
require "logger"
Bundler.require

STDOUT.sync = true
LOGGER = Logger.new(STDOUT)

TARGET_SCREEN_NAME = ENV["TARGET"]
TWITTER_CONFIG = {
  consumer_key: ENV["CONSUMER_KEY"],
  consumer_secret: ENV["CONSUMER_SECRET"],
  access_token: ENV["ACCESS_TOKEN"],
  access_token_secret: ENV["ACCESS_TOKEN_SECRET"],
}.freeze
REST = Twitter::REST::Client.new(TWITTER_CONFIG)

def update(text)
  begin
    REST.update("[#{Time.now.strftime("%Y-%m-%d %H:%M")}]\n#{text}")
  rescue => e
    LOGGER.error(e)
  end
end

def status
  begin
    user = REST.user(TARGET_SCREEN_NAME)
    last_status = user.status
    if (Time.now - last_status.created_at) < (8 * 3600 + 30)
      LOGGER.info("alive")
      :alive
    else
      LOGGER.info("stopped")
      :stopped
    end
  rescue Twitter::Error::Forbidden => e
    if e.message.include? "suspended"
      LOGGER.info("suspended")
      :suspended
    else
      LOGGER.error(e)
      e
    end
  rescue Twitter::Error::NotFound => e
    LOGGER.info("deleted")
    :deleted
  rescue => e
    LOGGER.error(e)
    e
  end
end

def check(force = false)
  new_status = status
  if new_status.is_a?(Symbol) && new_status == @status
    if force
      case new_status
      when :alive
        update("#{TARGET_SCREEN_NAME} は生きています")
      when :suspended
        update("#{TARGET_SCREEN_NAME} は凍結されています")
      when :deleted
        update("#{TARGET_SCREEN_NAME} はいません")
      when :stopped
        update("#{TARGET_SCREEN_NAME} は止まっています")
      end
    end
  else
    case new_status
    when :alive
      update("#{TARGET_SCREEN_NAME} が復活しました")
    when :suspended
      update("#{TARGET_SCREEN_NAME} が凍結されました")
    when :deleted
      update("#{TARGET_SCREEN_NAME} が消えました")
    when :stopped
      update("#{TARGET_SCREEN_NAME} が止まりました")
    else
      update("？？: #{e}")
    end
  end
  @status = new_status
end

unless TWITTER_CONFIG.values.all? && TARGET_SCREEN_NAME
  LOGGER.error("missing env")
  exit
end
@status = status

scheduler = Rufus::Scheduler.new
scheduler.cron("00,10,20,30,40,50 * * * * Asia/Tokyo") { check(false) }
scheduler.cron("00 00 * * * Asia/Tokyo") { check(true) }
scheduler.join
